name: Build Talos Linux for Rockchip Boards

on:
  push:
    branches:
      - main
  schedule:
    - cron: '0 3 * * 1'  # Weekly build every Monday at 03:00 UTC

jobs:
  build:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        board: [rock5-itx, rock5b]  # List of supported boards
        nvme: [nvme-enabled, nvme-disabled]   # NVMe boot support options
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Setup Build Environment
        run: |
          sudo apt-get update
          sudo apt-get install -y git make gcc g++ \
          gcc-aarch64-linux-gnu g++-aarch64-linux-gnu \
          libssl-dev bc bison flex

      - name: Clone Rockchip Kernel
        run: |
          git clone https://github.com/rockchip-linux/kernel.git -b develop-4.4 kernel

      - name: Apply Board-Specific Config
        run: |
          cd kernel
          cp ../boards/${{ matrix.board }}.config .config
          make ARCH=arm64 CROSS_COMPILE=aarch64-linux-gnu- olddefconfig
          make ARCH=arm64 CROSS_COMPILE=aarch64-linux-gnu- -j$(nproc)

      - name: Build U-Boot
        run: |
          git clone https://github.com/rockchip-linux/u-boot.git -b stable-2023.07 u-boot-rockchip
          cd u-boot-rockchip
          make ${{ matrix.board }}-rk3588_defconfig
          if [ "${{ matrix.nvme }}" == "enabled" ]; then
            echo "Enabling NVMe support in U-Boot..."
            sed -i 's|#define CONFIG_CMD_NVME|#define CONFIG_CMD_NVME|' include/configs/rk3588_common.h
            sed -i 's|#define CONFIG_NVME|#define CONFIG_NVME|' include/configs/rk3588_common.h
            sed -i 's|#define CONFIG_BLK|#define CONFIG_BLK|' include/configs/rk3588_common.h
            sed -i 's|#define CONFIG_PCI|#define CONFIG_PCI|' include/configs/rk3588_common.h
          else
            echo "NVMe support is disabled in this build."
          fi
          make ARCH=arm64 CROSS_COMPILE=aarch64-linux-gnu- -j$(nproc)
          cp idbloader.img u-boot.itb trust.img ../output/

      - name: Enable Additional Drivers
        run: |
          cd kernel
          echo "CONFIG_DRM_PANFROST=y" >> .config  # Panfrost GPU
          echo "CONFIG_MALI_GPU_PARTIAL_RENDER=y" >> .config
          echo "CONFIG_RTL8852BE=y" >> .config  # Networking
          echo "CONFIG_RTL88XXAU=y" >> .config
          echo "CONFIG_USB_NET_CDCETHER=y" >> .config
          echo "CONFIG_USB_NET_RNDIS_HOST=y" >> .config
          make ARCH=arm64 CROSS_COMPILE=aarch64-linux-gnu- olddefconfig
          make ARCH=arm64 CROSS_COMPILE=aarch64-linux-gnu- -j$(nproc)

      - name: Build Talos Image
        run: |
          git clone https://github.com/siderolabs/talos.git
          cd talos
          cp ../kernel/arch/arm64/boot/Image build/kernel/
          make image

      - name: Generate Checksum
        run: |
          sha256sum talos/output/talos-${{ matrix.board }}.img > talos/output/talos-${{ matrix.board }}.img.sha256

      - name: Upload Image as Artifact
        uses: actions/upload-artifact@v4
        with:
          name: talos-${{ matrix.board }}-nvme-${{ matrix.nvme }}
          path: |
            talos/output/talos-${{ matrix.board }}.img
            talos/output/talos-${{ matrix.board }}.img.sha256
            output/idbloader.img
            output/u-boot.itb
            output/trust.img

      - name: Release Image
        if: github.ref == 'refs/heads/main'
        uses: softprops/action-gh-release@v1
        with:
          files: |
            talos/output/talos-${{ matrix.board }}.img
            talos/output/talos-${{ matrix.board }}.img.sha256
            output/idbloader.img
            output/u-boot.itb
            output/trust.img
          tag_name: v${{ github.run_number }}
          body: "Talos Linux Build #${{ github.run_number }} for ${{ matrix.board }} with NVMe support: ${{ matrix.nvme }}."
